<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_characterStill</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.wings = false;
global.jewels = 0;
vSpeed = 0;

dieBlocks[0] = obj_lava;

originalWidth = view_wview;
originalHeight = view_hview;
zoomScale = 1; //1 = no zoom, the larger the number, the further out we're zooming
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement and collisions
a = keyboard_check(vk_left) or obj_GUI.xPos &lt; 38;
b = keyboard_check(vk_right) or obj_GUI.xPos &gt; 38;
c = keyboard_check(vk_up);
d = keyboard_check_pressed(vk_up);
e = keyboard_check_released(vk_up);

//horizontal movement
if(a &amp;&amp; !b){
    sprite_index = spr_characterMove;
    image_speed = 0.1;
    if(image_xscale = 1){
        image_xscale = -1;
    } else{
        hSpeed -= 50;
    }
} else if(!a &amp;&amp; b){
    sprite_index = spr_characterMove;
    image_speed = 0.1;
    if(image_xscale = -1){
        image_xscale = 1;
    } else{
        hSpeed += 50;
    }
} else{
    sprite_index = spr_characterStill;
    image_speed = 0;
    hSpeed = 0;
}

hSpeed = clamp(hSpeed,-400,400);

//jump
if(!place_free(x,y+1) &amp;&amp; d){
    vSpeed -= 500;
} else if(vspeed &lt; 10){
    vSpeed += 15;
}

//var jump
if(vSpeed &lt; 0 &amp;&amp; e){
    vSpeed = 0; 
}

for(i = 0;i &lt; array_length_1d(dieBlocks);i++){
    if(place_meeting(x+hSpeed*(delta_time/1000000),y+vSpeed*(delta_time/1000000),dieBlocks[i])){
        x = xstart;
        y = ystart;
    } else{
        if(!place_free(x+hSpeed*(delta_time/1000000),y)){
            while(place_free(x+sign(hSpeed)/3,y)){//while there is space 1/3 pixel to the left or right of player depending on direction of movement
                x += sign(hSpeed)/6;//x+1/6 pixel to the left or right...
            }
            hSpeed = 0;//then stop moving
        } else{
            x += hSpeed*(delta_time/1000000);
        }
        if(!place_free(x,y+vSpeed*(delta_time/1000000))){
            while(place_free(x,y+sign(vSpeed)/3)){
                y += sign(vSpeed)/6;
            }
            vSpeed = 0;
        } else{
            y += vSpeed*(delta_time/1000000);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///rangeBoxes
for(xChange = -2;xChange &lt; 3;xChange++){
    for(yChange = -2;yChange &lt; 3;yChange++){
        if(instance_number(obj_rangeBox) = 25){
            break;
        } else{
            var rangeBoxCreate = instance_create(((x+(xChange*38)) div 38)*38,((y+(yChange*38)) div 38)*38,obj_rangeBox);
            rangeBoxCreate.xPos = xChange;
            rangeBoxCreate.yPos = yChange;
            rangeBoxCreate.player = id;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///view

//zoom
if(mouse_wheel_up()){
    zoomScale -= 38/608;
} else if (mouse_wheel_down()){
    zoomScale += 38/608;
}
//zoom cap
zoomScale = clamp(zoomScale,0.5,2);

view_wview = originalWidth * zoomScale;
view_hview = originalHeight * zoomScale;

//obj_character following
view_xview = obj_character.x - view_wview/2;
view_yview = obj_character.y - view_hview/2;

//cap bottom
view_yview = min(view_yview,room_height-view_hview);
//cap left (if view_xview exits room, it becomes negative and it &lt; 0 so view_xview = 0 instead of..., preventing...)
view_xview = max(view_xview,0);
//cap right (if view_xview exits room, room_width-view_wview &lt; view_xview so view_xview = room_width-view_wview instead of..., preventing...)
view_xview = min(view_xview,room_width-view_wview);
//cap top
view_yview = max(view_yview,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(window_get_fullscreen()){
    window_set_fullscreen(false);
    window_set_position(0,0);
} else{
    window_set_fullscreen(true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///eq
draw_self();
if(keyboard_check_pressed(ord("W"))){
    switch(global.wings){
    case true: global.wings = false; break;
    case false: global.wings = true; break;
    }
    return 0;
}
if(global.wings){
    draw_sprite(spr_wings,0,x,y);
    if(c){
        vSpeed = -400; //can be upgraded
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
