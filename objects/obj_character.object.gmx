<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_characterStill</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bounce = 0;
state = states.normal;
jewels = 0;
jewelsAdded = 0;
jewelsToBeAdded = 0;
taps = 0;
time = 0;
keys = array_create(3);
eq = 0;
hp = 30;
hSpeed = 0;
vSpeed = 0;
zoomScale = 1;
global.items = ds_list_create();
global.amts = ds_map_create();

global.items[| 2] = obj_soil;
global.items[| 3] = obj_lava;
global.items[| 4] = obj_infectiousSoil;
global.items[| 5] = obj_platform;
global.items[| 6] = obj_mole;
global.items[| 7] = obj_blackHole;
global.items[| 8] = obj_bomb;
global.items[| 9] = obj_spawner;
global.items[| 10] = obj_chomper;
global.items[| 11] = obj_homingMissile;
global.items[| 14] = obj_ball;

for(i = 0; i &lt; 36; i++){
    if(i % 12 == 0){
        global.items[| i] = "set1";
    }
    if(i % 12 == 1){
        global.items[| i] = "set2";
    }
    if(is_undefined(global.items[| i])){
        global.items[| i] = "empty";
    }
    if(is_real(global.items[| i])){
        global.amts[? global.items[| i]] = 999;
    } else{
        global.amts[? global.items[| i]] = 0;
    }
}

keyPress[0] = ord('0');
keyPress[1] = ord('1');
keyPress[2] = ord('2');
keyPress[3] = ord('3');
keyPress[4] = ord('4');
keyPress[5] = ord('5');
keyPress[6] = ord('6');
keyPress[7] = ord('7');
keyPress[8] = ord('8');
keyPress[9] = ord('9');
keyPress[10] = ord("Z");
keyPress[11] = ord("X");

global.on = 0;
page = 0;
drawOnCursor = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(jewelsAdded &lt; jewelsToBeAdded){
    jewels++;
    jewelsAdded++;
    alarm[0] = 0.1 * 1000000/delta_time;
} else{
    jewelsAdded = 0;
    jewelsToBeAdded = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement and collisions
a = keyboard_check(ord("A")) || (mouse_check_button(mb_left) &amp;&amp; point_in_circle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),38,646,38));
b = keyboard_check(ord("D")) || (mouse_check_button(mb_left) &amp;&amp; point_in_circle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),114,646,38));
c = keyboard_check(ord("W")) || (mouse_check_button(mb_left) &amp;&amp; point_in_circle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),1102,646,38));
d = keyboard_check(ord("S")) || (mouse_check_button(mb_left) &amp;&amp; point_in_circle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),1178,646,38));
e = keyboard_check_pressed(ord("A")) || (mouse_check_button_pressed(mb_left) &amp;&amp; point_in_circle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),38,646,38));
f = keyboard_check_pressed(ord("D")) || (mouse_check_button_pressed(mb_left) &amp;&amp; point_in_circle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),114,646,38));
g = keyboard_check_pressed(ord("W")) || (mouse_check_button_pressed(mb_left) &amp;&amp; point_in_circle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),1102,646,38));

image_speed = delta_time/1000000;

if(b - a != 0){
    sprite_index = spr_characterMove;
    image_xscale = b - a;
    hSpeed += 25;
}

if(!place_free(x,y+1) &amp;&amp; place_free(x,y-1) &amp;&amp; g){
    vSpeed = -600;
} else if(vSpeed &lt; 0 &amp;&amp; !c){
    vSpeed = 0; 
} else if(place_free(x,y)){
    vSpeed += 20;
}

hSpeed = clamp(hSpeed,-400,400);
vSpeed = clamp(vSpeed,-600,400);
deltaTime = min(delta_time,1000000/30);

time++;
if(time = 20){
    taps = 0;
} //delta_time?? //state??

if(taps &lt; 2 &amp;&amp; f - e != 0){
    taps++;
    keys[taps] = f - e;
    time = 0;
    if(taps = 2 &amp;&amp; path_index == -1 &amp;&amp; keys[1] = keys[2]){
        if(keyboard_check(ord("U"))){
            move_contact_solid(90 - 90*(f - e),room_width);
        } else{
            move_contact_solid(90 - 90*(f - e),76);
        }
        hSpeed = 0;
        taps = 0;
    }
}

if(mouse_check_button_pressed(mb_middle) &amp;&amp; path_index == -1){
    if(!place_free(x+(b - a),y) &amp;&amp; place_free(x+76*(b - a),y)){
        state = states.xPhase;
    }
    if(!place_free(x,y+(d - c)) &amp;&amp; place_free(x,y+76*(d - c))){
        state = states.yPhase;
    }
}

if(bounce &amp; 1){
    state = states.bounce;
} else{
    speed = 0;
}

if(hp &lt;= 0 || place_meeting(x+(b - a),y,obj_lava) || place_meeting(x,y+sign(vSpeed),obj_lava)){
    state = states.die;
}

if(distance_to_object(obj_blackHole) &lt;= sqrt(2) &amp;&amp; state != states.die){
    state = states.suck;
}

switch(state){
    case states.xPhase: scr_character_xPhase(); state = states.normal; break;
    case states.yPhase: scr_character_yPhase(); state = states.normal; break;
    case states.bounce: scr_character_bounce(); state = states.normal; break;
    case states.die: scr_character_die(); break;
    case states.suck: scr_character_suck(); break;
    case states.normal: scr_character_normal(); break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///view
window_set_position((display_get_width()-window_get_width())/2,(display_get_height()-(window_get_height()+15))/2);

if(keyboard_check_pressed(vk_shift)){
    switch(window_get_fullscreen()){
        case true: window_set_fullscreen(false); break;
        case false: window_set_fullscreen(true); break;
    }
}

if(mouse_wheel_up() &amp;&amp; zoomScale &gt; 0.5){
    zoomScale -= 38/608;
}
if(mouse_wheel_down() &amp;&amp; zoomScale &lt; 2){
    zoomScale += 38/608;
}

view_wview = 608 * zoomScale;
view_hview = 342 * zoomScale;

//follow
view_xview = x - view_wview/2;
view_yview = y - view_hview/2;

//cap view
view_xview = clamp(view_xview,0,room_width-view_wview);
view_yview = clamp(view_yview,0,room_height-view_hview);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///others
if(point_in_rectangle(display_mouse_get_x(),display_mouse_get_y(),window_get_x(),window_get_y(),window_get_x()+window_get_width(),window_get_y()+window_get_height())){
    cursor_sprite = spr_cursor;
} else{
    cursor_sprite = -1;
}

if(keyboard_check_pressed(ord("J")) &amp;&amp; page &gt; 0){
    page--;
    if(!drawOnCursor){
        global.on = 12*page;
    }
}
if(keyboard_check_pressed(ord("L")) &amp;&amp; page &lt; 2){
    page++;
    if(!drawOnCursor){
        global.on = 12*page;
    }
}

if(keyboard_check_pressed(ord("P"))){
    eq++;
}

if(keyboard_check_pressed(ord("B")) &amp;&amp; path_index == -1){
    bounce++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///miscellaneous GUI
for(i = 0;i &lt; hp;i++){
    draw_sprite(spr_heart,0,38*i,0);
}

draw_set_halign(fa_right);
draw_sprite(spr_jewel,0,1216-38,0);
draw_text(1216-38,10,jewels);
draw_sprite_ext(spr_buttons,0,0,608,1,1,0,-1,0.3 * !(mouse_check_button(mb_left) &amp;&amp; point_in_circle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),38,646,38)) + 0.7);
draw_sprite_ext(spr_buttons,1,76,608,1,1,0,-1,0.3 * !(mouse_check_button(mb_left) &amp;&amp; point_in_circle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),114,646,38)) + 0.7);
draw_sprite_ext(spr_buttons,2,1064,608,1,1,0,-1,0.3 * !(mouse_check_button(mb_left) &amp;&amp; point_in_circle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),1102,646,38)) + 0.7);
draw_sprite_ext(spr_buttons,3,1140,608,1,1,0,-1,0.3 * !(mouse_check_button(mb_left) &amp;&amp; point_in_circle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),1178,646,38)) + 0.7);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///inv
for(i = 12 * page; i &lt; 12 * page + 12; i++){
    draw_sprite(spr_slot,0,152+76*(i-12*page),608);
    if(keyboard_check_pressed(keyPress[i-12*page])){
        global.on = i;
    }
    if(point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),152+76*(i-12*page),608,152+76*(i-12*page)+76,608+76)){
        if(mouse_check_button_pressed(mb_any)){
            global.on = i;
        }
        if(mouse_check_button_pressed(mb_right) &amp;&amp; global.on % 12 &lt; 2){
            global.amts[? global.items[| global.on]]++;
        }
        if(mouse_check_button_released(mb_right) &amp;&amp; i % 12 &gt; 1 &amp;&amp; global.on % 12 &gt; 1){
            item = global.items[| global.on];
            global.items[| global.on] = global.items[| i];
            global.items[| i] = item;
            global.on = i;
        }
    }
    if(global.amts[? global.items[| global.on]] == 0 &amp;&amp; global.on % 12 &gt; 1){
        global.items[| global.on] = "empty";
        global.on = 12*page;
    }
    draw_sprite(spr_slot,1,152+76*(global.on-12*page),608);
    if(i % 12 &lt; 2){
        if(global.amts[? global.items[| i]] &amp; 1){
            draw_sprite_stretched(spr_actions,(i-12*page)*2+1,152+76*(i-12*page)+9.5,608+9.5,57,57);
        } else{
            draw_sprite_stretched(spr_actions,(i-12*page)*2,152+76*(i-12*page)+9.5,608+9.5,57,57);
        }
    }
    if(is_real(global.items[| i])){
        draw_set_halign(fa_center);
        draw_sprite_stretched(object_get_sprite(global.items[| i]),0,152+76*(i-12*page)+10.25,608+14.75,57,57);
        draw_text(152+76*(i-12*page)+38,608,global.amts[? global.items[| i]]);
    }
    if(is_real(global.items[| global.on]) &amp;&amp; mouse_check_button_pressed(mb_right) &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),152+76*(global.on-12*page),608,152+76*(global.on-12*page)+76,608+76)){
        drawOnCursor = 1;
    } else if(mouse_check_button_released(mb_right)){
        drawOnCursor = 0;
        if(global.on div 12 != page &amp;&amp; !point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),304,608,304+76*10,608+76)){
            global.on = 12*page;
        }
    }
    if(drawOnCursor &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),152,608,152+76*12,608+76)){
        draw_sprite_stretched(object_get_sprite(global.items[| global.on]),0,device_mouse_x_to_gui(0)-57/2,device_mouse_y_to_gui(0)-57/2,57,57);     
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if(eq &amp; 1){
    draw_sprite(spr_wings,0,x,y);
    if(c){
        vSpeed = -400; //can be upgraded
    }
}

if(global.on % 12 &gt; 1 &amp;&amp; place_empty(mouse_x div 38 * 38 + 19,mouse_y div 38 * 38 + 19) &amp;&amp; !point_in_rectangle(mouse_x, mouse_y, floor((x - 19)/38) * 38, floor((y - 19)/38) * 38, ceil((x + 19)/38) * 38, ceil((y + 19)/38) * 38) &amp;&amp; point_in_rectangle(mouse_x,mouse_y,(x - 76) div 38 * 38,(y - 76) div 38 * 38,(x - 76) div 38 * 38 + 189,(y - 76) div 38 * 38 + 189)){
    draw_sprite_ext(global.items[| global.on],0,mouse_x div 38 * 38,mouse_y div 38 * 38,1,1,0,-1,0.3);
    if(mouse_check_button(mb_left)){
        instance_create(mouse_x div 38 * 38,mouse_y div 38 * 38,global.items[| global.on]);
        global.amts[? global.items[| global.on]]--;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
