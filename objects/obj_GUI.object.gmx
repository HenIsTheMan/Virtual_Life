<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i = 0;i &lt; 20;i++){
    global.thingsQuick[i] = noone;
    global.countQuick[i] = 0;
}

for(r = 0;r &lt; 7;r++){
    for(c = 0;c &lt; 15;c++){
        global.thingsInv[c,r] = noone;
        global.countInv[c,r] = 0;
    }
}

global.thingsQuick[5] = obj_infectiousSoil;
global.countQuick[5] = 100;
global.thingsQuick[6] = obj_chomper;
global.countQuick[6] = 100;
global.thingsQuick[7] = obj_platform;
global.countQuick[7] = 100;
global.thingsQuick[8] = obj_mole;
global.countQuick[8] = 100;
global.thingsQuick[9] = obj_bomb;
global.countQuick[9] = 100;
global.thingsInv[2,2] = obj_mole;
global.countInv[2,2] = 999;

keyPress[0] = vk_alt;
keyPress[1] = ord('1');
keyPress[2] = ord('2');
keyPress[3] = ord('3');
keyPress[4] = ord('4');
keyPress[5] = ord('5');
keyPress[6] = ord('6');
keyPress[7] = ord('7');
keyPress[8] = ord("X");
keyPress[9] = vk_control;

xPos = 38;
inv = 0;
on = 0;
page = 0;
onColumn = 0;
onRow = 0;
drawOnMouse = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mouse_check_button_released(mb_left)){
    drawOnMouse = false;
}

if(keyboard_check_pressed(vk_left) &amp;&amp; page &gt; 0){
    page--;
}
if(keyboard_check_pressed(vk_right) &amp;&amp; page &lt; 1){
    page++;
}

if(keyboard_check_pressed(ord("I"))){
    inv++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///quick slots
for(i = 10*page;i &lt; 10*page+10;i++){ //play with using 2 mouse buttons simultaneously??
    draw_sprite(spr_slot,0,228+76*(i-10*page),608);
    if(keyboard_check_pressed(keyPress[i-10*page])){
        on = i;
    }
    if(point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),228+76*(i-10*page),608,228+76*(i-10*page)+76,608+76)){
        if(mouse_check_button_pressed(mb_any)){
            on = i;
        }
        if(mouse_check_button_pressed(mb_left)){
            drawOnMouse = true;
        }
        if(mouse_check_button_pressed(mb_right)){
            if(on &lt; 2){
                global.countQuick[on]++;
            } else if(global.countQuick[on] != 0){ //beating to other slots
                for(add = 1;add &lt; 18;add++){
                    if(global.thingsQuick[on+add] == global.thingsQuick[on] or global.countQuick[on+add] == 0){
                        global.thingsQuick[on+add] = global.thingsQuick[on];
                        global.countQuick[on+add]++;
                        global.countQuick[on]--;
                        break;
                    }
                }
            }
        }
        if(mouse_check_button_released(mb_left) &amp;&amp; i &gt; 1 &amp;&amp; on &gt; 1 &amp;&amp; on != i){
            if(global.thingsQuick[i] == global.thingsQuick[on]){ //combining
                global.countQuick[i] += global.countQuick[on];
                global.countQuick[on] = 0;
            } else{ //swapping
                storeThings = global.thingsQuick[on];
                storeCount = global.countQuick[on];
                global.thingsQuick[on] = global.thingsQuick[i];
                global.countQuick[on] = global.countQuick[i];
                global.thingsQuick[i] = storeThings;
                global.countQuick[i] = storeCount;
            }
        }
    }
    if(global.countQuick[on] == 0 &amp;&amp; on &gt; 1){
        global.thingsQuick[on] = noone;
        on = 0;
    }
    if(on div 10 == page){
        draw_sprite(spr_slot,1,228+76*(on-10*page),608);
    }
    if(i &lt; 2){
        draw_sprite(spr_infinite,0,228+76*(i-10*page)+27,608); 
        if(global.countQuick[i] &amp; 1){
            draw_sprite(spr_actions,i*2+1,228+76*i+10,608+18);
        } else{
            draw_sprite(spr_actions,i*2,228+76*i+10,608+18);
        }
    }
    if(i &gt; 1 &amp;&amp; global.countQuick[i] != 0){
        draw_sprite_stretched(object_get_sprite(global.thingsQuick[i]),0,228+76*(i-10*page)+14,608+17,76/1.5,76/1.5); 
        if(global.countQuick[i] &gt; 1){
            draw_set_halign(fa_center);
            draw_text(228+76*(i-10*page)+38,608,global.countQuick[i]);
        }
    }
    if(drawOnMouse &amp;&amp; on &gt; 1 &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),228,608,228+76*10,608+76)){
        draw_sprite_stretched(object_get_sprite(global.thingsQuick[on]),0,device_mouse_x_to_gui(0) - 19,device_mouse_y_to_gui(0) - 19,76/1.5,76/1.5); 
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///inv###
if(inv &amp; 1){
    for(r = 0;r &lt; 7;r++){ //limit on rows
        for(c = 0;c &lt; 15;c++){ //limit on columns
            draw_sprite(spr_slot,0,38+76*c,47+76*r);
            if(global.countInv[c,r] != 0){
                draw_sprite_stretched(object_get_sprite(global.thingsInv[c,r]),0,38+76*c+14,47+76*r+17,76/1.5,76/1.5);
                if(global.countInv[c,r] &gt; 1){
                    draw_set_halign(fa_center);
                    draw_text(38+76*c+38,47+76*r,global.countInv[c,r]);
                }
            }
            if(mouse_check_button_pressed(mb_left) &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),38+76*c,47+76*r,38+76*c+76,47+76*r+76)){
                onColumn = c;
                onRow = r;
            }
            draw_sprite(spr_slot,1,38+76*onColumn,47+76*onRow);
        }
    }
}
/*          if(mouse_check_button(mb_left) &amp;&amp; global.thingsInv[onColumn,onRow] != noone &amp;&amp; on &lt; 2){
                invOnMouse = true;
                draw_sprite_stretched(object_get_sprite(global.thingsInv[onColumn,onRow]),0,device_mouse_x_to_gui(0)-19,device_mouse_y_to_gui(0)-19,76/1.5,76/1.5);
            } else{
                invOnMouse = false;
                draw_sprite_stretched(object_get_sprite(global.thingsInv[c,r]),0,38+76*c+14,47+76*r+17,76/1.5,76/1.5);
            }
                    if(mouse_check_button_released(mb_left) &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),38+76*c,47+76*r,38+76*c+76,47+76*r+76)){
            if(invOnMouse){
                global.thingsInv[c,r] = global.thingsInv[onColumn,onRow];
                global.countInv[c,r] = global.countInv[onColumn,onRow];
                global.thingsInv[c,r] = noone;
                global.countInv[c,r] = 0;
            } else if(quickOnMouse){
                global.thingsInv[c,r] = global.thingsQuick[on];
                global.countInv[c,r] = global.countQuick[on];
                global.thingsQuick[on] = noone;
                global.countQuick[on] = 0;
            }
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///other GUI
for(i = 0;i &lt; obj_character.hp;i++){
    draw_sprite(spr_heart,0,38*i,0);
} 

draw_sprite(spr_jewel,0,1216-38,0);
draw_set_halign(fa_right);
draw_text(1216-38,19/2,obj_character.jewels);

if(mouse_check_button(mb_left) &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),0,608,0+152,608+76)){  
    xPos = device_mouse_x_to_gui(0) div 76*76;   
} else{
    xPos = 38;
}

draw_sprite(spr_upDown,2,1064,608);
draw_sprite(spr_upDown,3,1140,608);
draw_sprite(spr_moveBar,0,0,608);
draw_sprite(spr_moveBall,0,xPos,608); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
