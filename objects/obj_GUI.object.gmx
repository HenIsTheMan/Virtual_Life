<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_slot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
display_set_gui_size(display_get_gui_width(),display_get_gui_height());
for(i = 0;i &lt; 18;i++){
    global.thingsQuick[i] = noone;
    global.countQuick[i] = 0;
}
health = 1216/38 - 2;

on = 0;
page = 0;
xPos = 38;
y = 608;
onColumn = 0;
onRow = 0;
invPressed = false;
quickPressed = false;
    global.thingsQuick[2] = obj_mole;
    global.countQuick[2] = 999;

//inventory
for(r = 0;r &lt; 7;r++){//rows
    for(c = 0;c &lt; 15;c++){//columns
        global.thingsInv[c,r] = noone;
        global.countInv[c,r] = 0;
    }
}

    global.thingsInv[2,2] = obj_chomper;
    global.countInv[2,2] = 999;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///nextPage and moveBall

if(mouse_check_button_pressed(mb_left)){
    if(page &gt; 0 &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),228,y,228+38,y+76)){
        page--;
        on = 9*(page);
    } else if(point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),950,y,950+38,y+76)){
        page++;
        on = 9*(page);
    }
}

if(mouse_check_button(mb_left) &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),0,y,0+152,y+76)){
    xPos = min((device_mouse_x_to_gui(0) div 76)*76,76);
} else{
    xPos = 38;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///quickSlots and other GUI
for(i = 9*page;i &lt; 9+9*page;i++){
    x = 266+76*(i-9*page);
    draw_self();
    if(mouse_check_button_pressed(mb_any) &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),266+76*(i-9*page),y,266+76*(i-9*page)+76,y+76) /*or keyboard_check_pressed(key_press[i])*/){
        if(on = i &amp;&amp; on &lt; 2 &amp;&amp; mouse_check_button_pressed(mb_left)){
            global.countQuick[on]++;
        } else{
            on = i;
        }
        if(mouse_check_button_pressed(mb_left)){
            quickPressed = true;
        } else{
            quickPressed = false;
        }
        if(mouse_check_button_pressed(mb_right) &amp;&amp; global.countQuick[on] != 0){//beating to other quickSlots
            for(add = 1;add &lt; 16;add++){
                if(global.countQuick[on+add] = 0){
                    global.thingsQuick[on+add] = global.thingsQuick[on];
                    global.countQuick[on+add]++;
                    global.countQuick[on]--;
                    break;
                } else if(global.thingsQuick[on+add] = global.thingsQuick[on]){
                    global.countQuick[on+add]++;
                    global.countQuick[on]--;
                    break;
                }
            }
        }
    }
    if(global.countQuick[on] = 0 &amp;&amp; on &gt; 1){
        on = 0;
    }
    draw_sprite(spr_slot,1,266+76*(on-9*page),y);
    if(i &gt; 1){
        if(global.countQuick[i] != 0){
            if(mouse_check_button(mb_left) &amp;&amp; on &gt; 1){
                draw_sprite_stretched(object_get_sprite(global.thingsQuick[on]),0,device_mouse_x_to_gui(0)-19,device_mouse_y_to_gui(0)-19,sprite_width/1.5,sprite_height/1.5);
            } else{
                draw_sprite_stretched(object_get_sprite(global.thingsQuick[i]),0,266+76*(i-9*page)+14,y+17,sprite_width/1.5,sprite_height/1.5);
            }    
            if(global.countQuick[i] &gt; 1){
                draw_set_halign(fa_center);
                draw_text(266+76*(i-9*page)+38,y,global.countQuick[i]);
            }
        }
    } else{
        draw_sprite(spr_infinite,0,266+76*(i-9*page)+27,y); 
        if(global.countQuick[i] &amp; 1){
            draw_sprite(spr_actions,i*2+1,266+76*i+9,y+18);
        } else{
            draw_sprite(spr_actions,i*2,266+76*i+9,y+18);
        }
    }
    if(mouse_check_button_released(mb_left) &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),266+76*(i-9*page),y,266+76*(i-9*page)+76,y+76)){
        global.thingsQuick[i] = global.thingsInv[onColumn,onRow];
        global.countQuick[i] = global.countInv[onColumn,onRow];
        global.thingsInv[onColumn,onRow] = noone;
        global.countInv[onColumn,onRow] = 0;
    }
    draw_sprite(spr_upDown,2,1064,y);
    draw_sprite(spr_upDown,3,1140,y);
    draw_sprite(spr_nextPage,0,229,y);
    draw_sprite(spr_nextPage,0,950,y);
    draw_sprite(spr_moveBar,0,0,y);
    draw_sprite(spr_moveBall,0,xPos,y);
}
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///health and jewelCount
//draw_healthbar(0,0,0+152,0+76,health,c_gray,c_red,c_lime,0,true,true);
for(i = 0;i &lt; health;i++){
    draw_sprite(spr_heart,0,0+38*i,0);
}  

draw_sprite(spr_jewel,0,1216-38,0);
draw_set_halign(fa_right);
draw_text(1216-38,19/2,global.jewels);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///inventory
for(r = 0;r &lt; 7;r++){//limit on rows
    for(c = 0;c &lt; 15;c++){//limit on columns
        draw_sprite(spr_slot,0,38+76*c,47+76*r);
        if(global.countInv[c,r] != 0){
            if(mouse_check_button(mb_left) &amp;&amp; global.thingsInv[onColumn,onRow] != noone &amp;&amp; on &lt; 2){
                draw_sprite_stretched(object_get_sprite(global.thingsInv[onColumn,onRow]),0,device_mouse_x_to_gui(0)-19,device_mouse_y_to_gui(0)-19,sprite_width/1.5,sprite_height/1.5);
            } else{
                draw_sprite_stretched(object_get_sprite(global.thingsInv[c,r]),0,38+76*c+14,47+76*r+17,sprite_width/1.5,sprite_height/1.5);
            }
            if(global.countInv[c,r] &gt; 1){
                draw_set_halign(fa_center);
                draw_text(38+76*c+38,47+76*r,global.countInv[c,r]);
            }
        }
        if(mouse_check_button_pressed(mb_left) &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),38+76*c,47+76*r,38+76*c+76,47+76*r+76)){
            onColumn = c;
            onRow = r;
            invPressed = true;
        } else{
            invPressed = false;
        }
        draw_sprite(spr_slot,1,38+76*onColumn,47+76*onRow);
        if(on &gt; 1 &amp;&amp; mouse_check_button_released(mb_left) &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),38+76*c,47+76*r,38+76*c+76,47+76*r+76)){
            global.thingsInv[c,r] = global.thingsQuick[on];
            global.countInv[c,r] = global.countQuick[on];
            global.thingsQuick[on] = noone;
            global.countQuick[on] = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///do nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
