<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bedrock</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>originalWidth = view_wview;
originalHeight = view_hview;
zoomScale = 1; //1 = no zoom, the larger the number, the further out we're zooming
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = (mouse_x div 38)*38;
y = (mouse_y div 38)*38;

//placing
if(distance_to_object(obj_character) &lt;= 64 &amp;&amp; distance_to_object(obj_character) &gt;= 0){
    if(mouse_check_button(mb_left) &amp;&amp; obj_GUI.on &gt;= 2 &amp;&amp; global.items[obj_GUI.on] != noone &amp;&amp; place_free(x,y)){
        instance_create(x,y,global.items[obj_GUI.on]);
        if(global.countQuick[obj_GUI.on] &gt; 0){
            global.countQuick[obj_GUI.on]--;
        }
    }
}

//facing for actions
/*if(mouse_check_button(mb_left) &amp;&amp; !place_free(x,y) &amp;&amp; obj_character.hspeed = 0){
    if(distance_to_object(obj_character) &lt;= 64 &amp;&amp; distance_to_object(obj_character) &gt;= 0){
        with(obj_character){
            if(mouse_x &gt; x &amp;&amp; image_xscale != 1){
                image_xscale = 1;
                x -= 32;
            } else if(mouse_x &lt; x &amp;&amp; image_xscale != -1){
                image_xscale = -1;
                x += 32;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///zoom
if (mouse_wheel_up()){
    zoomScale -= 38/608;
} else if (mouse_wheel_down()){
    zoomScale += 38/608;
}

//cap zoomScale1 and zoomScale2 between 0.5 and 2
zoomScale = max(190/608, min(zoomScale, 2));

view_wview = originalWidth * zoomScale;
view_hview = originalHeight * zoomScale;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///character following

view_xview = obj_character.x - view_wview/2+19;
view_yview = obj_character.y - view_hview/2+19;

//following obj in room fixes.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cap boundaries

// cap bottom
view_yview = min(view_yview,room_height-view_hview);
// cap left
view_xview = max(view_xview,0);
// cap right
view_xview = min(view_xview,room_width-view_wview);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
